From 7ccfd6a91b56dbceb73ecf2e49aa72afb792a761 Mon Sep 17 00:00:00 2001
From: Rahul Singh <rahul.singh@arm.com>
Date: Tue, 20 Oct 2020 10:56:24 +0100
Subject: [PATCH 41/78] xen/arm: Add quirks for PCIE N1SDP

Change-Id: Ib878719b11a3bad739702e49e4bc45f9ec355217
Signed-off-by: Rahul Singh <rahul.singh@arm.com>
---
 xen/arch/arm/pci/Makefile     |   1 +
 xen/arch/arm/pci/pcie-n1sdp.c | 239 ++++++++++++++++++++++++++++++++++
 2 files changed, 240 insertions(+)
 create mode 100644 xen/arch/arm/pci/pcie-n1sdp.c

diff --git a/xen/arch/arm/pci/Makefile b/xen/arch/arm/pci/Makefile
index 1d045ade01..4701219e3b 100644
--- a/xen/arch/arm/pci/Makefile
+++ b/xen/arch/arm/pci/Makefile
@@ -4,3 +4,4 @@ obj-y += pci-host-generic.o
 obj-y += pci-host-common.o
 obj-y += ecam.o
 obj-y += pci-host-zynqmp.o
+obj-y += pcie-n1sdp.o
diff --git a/xen/arch/arm/pci/pcie-n1sdp.c b/xen/arch/arm/pci/pcie-n1sdp.c
new file mode 100644
index 0000000000..e3b5826413
--- /dev/null
+++ b/xen/arch/arm/pci/pcie-n1sdp.c
@@ -0,0 +1,239 @@
+/*
+ * Copyright (C) 2020 ARM Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * N1SDP PCI quirks to access the config space.
+ *
+ * This file implement quirk to mask the following issues:
+ * - PCIE SLVERR: config space accesses to invalid PCIe BDFs cause a bus
+ *		  error (signalled as an asynchronous SError)
+ * - MCFG BDF mapping: the root complex is mapped separately from the device
+ *		       config space
+ * - Non 32-bit accesses to config space are not supported.
+ *
+ * At boot time the SCP board firmware creates a discovery table with
+ * the root complex' base address and the valid BDF values, discovered while
+ * scanning the config space and catching the SErrors.
+ *
+ */
+
+#include <asm/device.h>
+#include <asm/io.h>
+#include <xen/pci.h>
+#include <xen/sizes.h>
+#include <xen/vmap.h>
+#include <asm/pci.h>
+
+/* Platform specific values as hardcoded in the firmware. */
+#define AP_NS_SHARED_MEM_BASE   0x06000000
+#define MAX_SEGMENTS        2       /* Two PCIe root complexes. */
+#define BDF_TABLE_SIZE      SZ_16K
+
+/*
+ * Shared memory layout as written by the SCP upon boot time:
+ *  ----
+ *  Discover data header --> RC base address
+ *                       \-> BDF Count
+ *  Discover data        --> BDF 0...n
+ *  ----
+ */
+struct pcie_discovery_data {
+    u32 rc_base_addr;
+    u32 nr_bdfs;
+    u32 valid_bdfs[0];
+} *pcie_discovery_data[MAX_SEGMENTS];
+
+void __iomem *rc_remapped_addr[MAX_SEGMENTS];
+
+/*
+ * Copy data from IO memory space to "real" memory space.
+ */
+void memcpy_fromio(void *to, const volatile void __iomem *from, size_t count)
+{
+    while (count && !IS_ALIGNED((unsigned long)from, 8)) {
+        *(u8 *)to = __raw_readb(from);
+        from++;
+        to++;
+        count--;
+    }
+
+    while (count >= 8) {
+        *(u64 *)to = __raw_readq(from);
+        from += 8;
+        to += 8;
+        count -= 8;
+    }
+
+    while (count) {
+        *(u8 *)to = __raw_readb(from);
+        from++;
+        to++;
+        count--;
+    }
+}
+/*
+ * map_bus() is called before we do a config space access for a certain
+ * device. We use this to check whether this device is valid, avoiding
+ * config space accesses which would result in an SError otherwise.
+ */
+static void __iomem *pci_n1sdp_map_bus(struct pci_host_bridge *bridge,
+        pci_sbdf_t sbdf, uint32_t where)
+{
+    const struct pci_ecam_ops *ops =
+        container_of(bridge->ops, const struct pci_ecam_ops, pci_ops);
+    struct pci_config_window *cfg = bridge->cfg;
+    unsigned int devfn_shift = ops->bus_shift - 8;
+    unsigned int busn = sbdf.bus;
+    unsigned int segment = sbdf.seg;
+    unsigned int devfn = PCI_DEVFN(sbdf.dev, sbdf.fn);
+    unsigned int bdf_addr;
+    unsigned int table_count, i;
+
+    if ( segment >= MAX_SEGMENTS ||
+            busn < cfg->busn_start || busn > cfg->busn_end )
+        return NULL;
+
+    /* The PCIe root complex has a separate config space mapping. */
+    if ( busn == 0 && devfn == 0 )
+        return rc_remapped_addr[segment] + where;
+
+    /* Accesses beyond the vendor ID always go to existing devices. */
+    if ( where > 0 )
+        return pci_ecam_map_bus(bridge, sbdf, where);
+
+    busn -= cfg->busn_start;
+    bdf_addr = (busn << ops->bus_shift) + (devfn << devfn_shift);
+    table_count = pcie_discovery_data[segment]->nr_bdfs;
+
+    for ( i = 0; i < table_count; i++ ) {
+        if ( bdf_addr == pcie_discovery_data[segment]->valid_bdfs[i] )
+            return pci_ecam_map_bus(bridge, sbdf, where);
+    }
+
+    return NULL;
+}
+
+static int pci_n1sdp_init(struct pci_config_window *cfg, unsigned int segment)
+{
+    paddr_t table_base;
+    struct pcie_discovery_data *shared_data;
+    size_t bdfs_size;
+
+    if ( segment >= MAX_SEGMENTS )
+        return -ENODEV;
+
+    table_base = AP_NS_SHARED_MEM_BASE + segment * BDF_TABLE_SIZE;
+
+    shared_data = ioremap_nocache(table_base, BDF_TABLE_SIZE);
+    if ( !shared_data )
+        return -ENOMEM;
+
+    /* Copy the valid BDFs structure to allocated normal memory. */
+    bdfs_size = sizeof(struct pcie_discovery_data) +
+        sizeof(u32) * shared_data->nr_bdfs;
+
+    pcie_discovery_data[segment] = _xmalloc(bdfs_size, PAGE_SIZE);
+    if ( !pcie_discovery_data[segment] )
+        return -ENOMEM;
+
+    memcpy_fromio(pcie_discovery_data[segment], shared_data, bdfs_size);
+
+    rc_remapped_addr[segment] = ioremap_nocache(shared_data->rc_base_addr,
+            PCI_CFG_SPACE_EXP_SIZE);
+
+    if ( !rc_remapped_addr[segment] ) {
+        printk(XENLOG_ERR "Cannot remap root port base\n");
+        return -ENOMEM;
+    }
+
+    iounmap(shared_data);
+
+    return 0;
+}
+
+static int pci_n1sdp_pcie_init(struct pci_config_window *cfg)
+{
+    return pci_n1sdp_init(cfg, 0);
+}
+
+static int pci_n1sdp_ccix_init(struct pci_config_window *cfg)
+{
+    return pci_n1sdp_init(cfg, 1);
+}
+
+
+struct pci_ecam_ops pci_n1sdp_pcie_ecam_ops = {
+    .bus_shift  = 20,
+    .init       = pci_n1sdp_pcie_init,
+    .pci_ops    = {
+        .map_bus        = pci_n1sdp_map_bus,
+        .read           = pci_generic_config_read32,
+        .write          = pci_generic_config_write32,
+        .need_p2m_hwdom_mapping = pci_ecam_need_p2m_hwdom_mapping,
+    }
+};
+
+struct pci_ecam_ops pci_n1sdp_ccix_ecam_ops = {
+    .bus_shift  = 20,
+    .init       = pci_n1sdp_ccix_init,
+    .pci_ops    = {
+        .map_bus        = pci_n1sdp_map_bus,
+        .read           = pci_generic_config_read32,
+        .write          = pci_generic_config_write32,
+        .need_p2m_hwdom_mapping = pci_ecam_need_p2m_hwdom_mapping,
+    }
+};
+
+struct dt_device_match n1sdp_pcie_dt_match[] = {
+    { .compatible = "arm,n1sdp-pcie" },
+    { },
+};
+
+static int n1sdp_pcie_dt_init(struct dt_device_node *dev, const void *data)
+{
+    u32 segment;
+
+    if ( !dt_property_read_u32(dev, "linux,pci-domain", &segment )) {
+        printk(XENLOG_ERR "N1SDP PCI requires linux,pci-domain property\n");
+        return -EINVAL;
+    }
+
+    printk("Found PCI host bridge:%s \n", dt_node_full_name(dev));
+
+    switch (segment) {
+        case 0:
+            return pci_host_common_probe(dev, &pci_n1sdp_pcie_ecam_ops);
+        case 1:
+            return pci_host_common_probe(dev, &pci_n1sdp_ccix_ecam_ops);
+    }
+
+    printk(XENLOG_ERR "Invalid segment number, must be smaller than %d\n",
+            MAX_SEGMENTS);
+
+    return -EINVAL;
+}
+DT_DEVICE_START(pci_gen, "PCIE N1SDP", DEVICE_PCI_HOSTBRIDGE)
+.dt_match = n1sdp_pcie_dt_match,
+.init = n1sdp_pcie_dt_init,
+DT_DEVICE_END
+
+/*
+ * Local variables:
+ * mode: C
+ * c-file-style: "BSD"
+ * c-basic-offset: 4
+ * tab-width: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
-- 
2.25.1

