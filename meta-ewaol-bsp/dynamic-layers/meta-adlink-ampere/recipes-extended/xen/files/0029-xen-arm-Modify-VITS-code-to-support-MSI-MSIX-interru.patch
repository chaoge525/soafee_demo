From 3d77c4f30b0deb0254922b0e297213bd1083ea00 Mon Sep 17 00:00:00 2001
From: Rahul Singh <rahul.singh@arm.com>
Date: Wed, 8 Dec 2021 20:47:56 +0000
Subject: [PATCH 29/78] xen/arm: Modify VITS code to support MSI/MSIX interrupt
 for DOMU guests.

Virtual ITS code is supported for hardware domain currently .Modify the
code to support the VITS for the DOMU guest also to enable the MSI/MSIX
support for guests.

Signed-off-by: Rahul Singh <rahul.singh@arm.com>
---
 xen/arch/arm/gic-v3-its.c          |  26 +++++
 xen/arch/arm/pci/pci-host-common.c |  25 +++++
 xen/arch/arm/vgic-v3-its.c         | 149 +++++++++++++++++++++++------
 xen/arch/arm/vgic-v3.c             |   9 +-
 xen/include/asm-arm/gic_v3_its.h   |   2 +
 xen/include/asm-arm/pci.h          |   1 +
 6 files changed, 177 insertions(+), 35 deletions(-)

diff --git a/xen/arch/arm/gic-v3-its.c b/xen/arch/arm/gic-v3-its.c
index 1848063c0c..6568b044e8 100644
--- a/xen/arch/arm/gic-v3-its.c
+++ b/xen/arch/arm/gic-v3-its.c
@@ -642,6 +642,32 @@ static int gicv3_its_map_host_events(struct host_its *its,
     return gicv3_its_wait_commands(its);
 }
 
+int gicv3_its_unmap_all_guest_device(struct domain *d)
+{
+    struct rb_node **new = &d->arch.vgic.its_devices.rb_node;
+    int ret;
+
+    spin_lock(&d->arch.vgic.its_devices_lock);
+    while ( *new )
+    {
+        struct its_device *temp = rb_entry(*new, struct its_device, rbnode);
+
+        /* Discard all events and remove pending LPIs. */
+        //its_unmap_device(its, guest_devid);
+
+        rb_erase(&temp->rbnode, &d->arch.vgic.its_devices);
+
+        ret = remove_mapped_guest_device(temp);
+        if ( ret )
+            return ret;
+
+        new = &d->arch.vgic.its_devices.rb_node;
+    }
+    spin_unlock(&d->arch.vgic.its_devices_lock);
+
+    return 0;
+}
+
 /*
  * Map a hardware device, identified by a certain host ITS and its device ID
  * to domain d, a guest ITS (identified by its doorbell address) and device ID.
diff --git a/xen/arch/arm/pci/pci-host-common.c b/xen/arch/arm/pci/pci-host-common.c
index fd8c0f837a..dd8081e7ac 100644
--- a/xen/arch/arm/pci/pci-host-common.c
+++ b/xen/arch/arm/pci/pci-host-common.c
@@ -141,6 +141,29 @@ void pci_add_host_bridge(struct pci_host_bridge *bridge)
     list_add_tail(&bridge->node, &pci_host_bridges);
 }
 
+static int pci_set_msi_base(struct pci_host_bridge *bridge)
+{
+    struct dt_device_node *msi_node;
+    const __be32 *map = NULL;
+    uint64_t addr, size;
+
+    map = dt_get_property(bridge->dt_node, "msi-map", NULL);
+    if ( !map )
+        return -ENODEV;
+
+    msi_node = dt_find_node_by_phandle(be32_to_cpup(map + 1));
+    if ( !msi_node )
+        return -ENODEV;
+
+    if ( dt_device_get_address(msi_node, 0, &addr, &size) )
+        return -ENODEV;
+
+    bridge->its_msi_base = addr;
+
+    return 0;
+}
+
+
 int pci_get_new_domain_nr(void)
 {
     if ( use_dt_domains )
@@ -232,6 +255,8 @@ int pci_host_common_probe(struct dt_device_node *dev,
     }
     pci_add_host_bridge(bridge);
 
+    pci_set_msi_base(bridge);
+
     return 0;
 
 err_exit:
diff --git a/xen/arch/arm/vgic-v3-its.c b/xen/arch/arm/vgic-v3-its.c
index 58d939b85f..94f8959d6a 100644
--- a/xen/arch/arm/vgic-v3-its.c
+++ b/xen/arch/arm/vgic-v3-its.c
@@ -287,6 +287,91 @@ static uint64_t its_cmd_mask_field(uint64_t *its_cmd, unsigned int word,
     return (its_cmd[word] >> shift) & GENMASK(size - 1, 0);
 }
 
+#ifdef CONFIG_HAS_PCI
+static uint32_t dt_msi_map_id(uint32_t id_in)
+{
+    uint32_t id_out = id_in;
+    const struct pci_host_bridge *bridge;
+    int rc;
+
+    bridge = pci_find_host_bridge(PCI_SEG(id_in), PCI_BUS(id_in));
+    if ( unlikely(!bridge) )
+        return -ENODEV;
+
+    rc = dt_map_id(bridge->dt_node, id_in, "msi-map", "msi-map-mask",
+                   NULL, &id_out);
+    if ( rc )
+        return rc;
+
+    return id_out;
+}
+
+static uint32_t its_get_host_devid(struct domain *d, uint32_t guest_devid)
+{
+    uint32_t host_devid = guest_devid;
+
+    if ( !pci_passthrough_enabled )
+        return guest_devid;
+
+    if ( !is_hardware_domain(d) )
+    {
+        pci_sbdf_t sbdf = (pci_sbdf_t)guest_devid;
+        const struct pci_dev *pdev;
+
+        pcidevs_lock();
+        for_each_pdev( d, pdev )
+        {
+            /* Replace virtual SBDF with the physical one. */
+            if ( pdev->vpci->guest_sbdf.sbdf == sbdf.sbdf )
+            {
+                host_devid = dt_msi_map_id(pdev->sbdf.sbdf);
+            }
+        }
+        pcidevs_unlock();
+    }
+
+    return host_devid;
+}
+
+paddr_t its_get_host_doorbell(struct virt_its *its, uint32_t guest_devid)
+{
+    const struct pci_host_bridge *bridge;
+    const struct pci_dev *pdev;
+    uint32_t host_devid = guest_devid;
+    pci_sbdf_t sbdf = (pci_sbdf_t)guest_devid;
+
+    if ( !pci_passthrough_enabled )
+        return its->doorbell_address;
+
+    pcidevs_lock();
+    for_each_pdev( its->d, pdev )
+    {
+        if ( pdev->vpci->guest_sbdf.sbdf == sbdf.sbdf )
+        {
+            /* Replace virtual SBDF with the physical one. */
+            host_devid = pdev->sbdf.sbdf;
+        }
+    }
+    pcidevs_unlock();
+
+    bridge = pci_find_host_bridge(PCI_SEG(host_devid), PCI_BUS(host_devid));
+    if ( unlikely(!bridge) )
+        return -ENODEV;
+
+    return bridge->its_msi_base + ITS_DOORBELL_OFFSET;
+}
+#else
+static uint32_t its_get_host_devid(struct domain *d, uint32_t guest_devid)
+{
+    return guest_devid;
+}
+
+paddr_t its_get_host_doorbell(struct virt_its *its, uint32_t host_devid)
+{
+    return its->doorbell_address;
+}
+#endif
+
 #define its_cmd_get_command(cmd)        its_cmd_mask_field(cmd, 0,  0,  8)
 #define its_cmd_get_deviceid(cmd)       its_cmd_mask_field(cmd, 0, 32, 32)
 #define its_cmd_get_size(cmd)           its_cmd_mask_field(cmd, 1,  0,  5)
@@ -529,7 +614,6 @@ static int its_handle_invall(struct virt_its *its, uint64_t *cmdptr)
      * However this command is very rare, also we don't expect many
      * LPIs to be actually mapped, so it's fine for Dom0 to use.
      */
-    ASSERT(is_hardware_domain(its->d));
 
     /*
      * If no redistributor has its LPIs enabled yet, we can't access the
@@ -640,14 +724,6 @@ static void its_unmap_device(struct virt_its *its, uint32_t devid)
     if ( its_get_itt(its, devid, &itt) )
         goto out;
 
-    /*
-     * For DomUs we need to check that the number of events per device
-     * is really limited, otherwise looping over all events can take too
-     * long for a guest. This ASSERT can then be removed if that is
-     * covered.
-     */
-    ASSERT(is_hardware_domain(its->d));
-
     for ( evid = 0; evid < DEV_TABLE_ITT_SIZE(itt); evid++ )
         /* Don't care about errors here, clean up as much as possible. */
         its_discard_event(its, devid, evid);
@@ -659,10 +735,12 @@ out:
 static int its_handle_mapd(struct virt_its *its, uint64_t *cmdptr)
 {
     /* size and devid get validated by the functions called below. */
-    uint32_t devid = its_cmd_get_deviceid(cmdptr);
+    uint32_t guest_devid = its_cmd_get_deviceid(cmdptr);
+    uint32_t host_devid = its_get_host_devid(its->d, guest_devid);
     unsigned int size = its_cmd_get_size(cmdptr) + 1;
     bool valid = its_cmd_get_validbit(cmdptr);
     paddr_t itt_addr = its_cmd_get_ittaddr(cmdptr);
+    paddr_t host_doorbell_address;
     int ret;
 
     /* Sanitize the number of events. */
@@ -671,7 +749,7 @@ static int its_handle_mapd(struct virt_its *its, uint64_t *cmdptr)
 
     if ( !valid )
         /* Discard all events and remove pending LPIs. */
-        its_unmap_device(its, devid);
+        its_unmap_device(its, guest_devid);
 
     /*
      * There is no easy and clean way for Xen to know the ITS device ID of a
@@ -681,26 +759,24 @@ static int its_handle_mapd(struct virt_its *its, uint64_t *cmdptr)
      * Eventually this will be replaced with a dedicated hypercall to
      * announce pass-through of devices.
      */
-    if ( is_hardware_domain(its->d) )
-    {
 
-        /*
-         * Dom0's ITSes are mapped 1:1, so both addresses are the same.
-         * Also the device IDs are equal.
-         */
-        ret = gicv3_its_map_guest_device(its->d, its->doorbell_address, devid,
-                                         its->doorbell_address, devid,
-                                         BIT(size, UL), valid);
-        if ( ret && valid )
-            return ret;
-    }
+    if ( !is_hardware_domain(its->d) )
+        host_doorbell_address = its_get_host_doorbell(its, guest_devid);
+    else
+        host_doorbell_address = its->doorbell_address;
+
+    ret = gicv3_its_map_guest_device(its->d, host_doorbell_address, host_devid,
+                                     its->doorbell_address, guest_devid,
+                                     BIT(size, UL), valid);
+    if ( ret && valid )
+        return ret;
 
     spin_lock(&its->its_lock);
 
     if ( valid )
-        ret = its_set_itt_address(its, devid, itt_addr, size);
+        ret = its_set_itt_address(its, guest_devid, itt_addr, size);
     else
-        ret = its_set_itt_address(its, devid, INVALID_PADDR, 1);
+        ret = its_set_itt_address(its, guest_devid, INVALID_PADDR, 1);
 
     spin_unlock(&its->its_lock);
 
@@ -1188,7 +1264,6 @@ static bool vgic_v3_verify_its_status(struct virt_its *its, bool status)
      * an LPI), which should go away with proper per-IRQ locking.
      * So for now we ignore this issue and rely on Dom0 not doing bad things.
      */
-    ASSERT(is_hardware_domain(its->d));
 
     return true;
 }
@@ -1516,6 +1591,8 @@ unsigned int vgic_v3_its_count(const struct domain *d)
 int vgic_v3_its_init_domain(struct domain *d)
 {
     int ret;
+    static unsigned int devid_bits = 0xff;
+    static unsigned int evid_bits = 0xff;
 
     INIT_LIST_HEAD(&d->arch.vgic.vits_list);
     spin_lock_init(&d->arch.vgic.its_devices_lock);
@@ -1539,8 +1616,26 @@ int vgic_v3_its_init_domain(struct domain *d)
                 return ret;
             else
                 d->arch.vgic.has_its = true;
+
+            if ( hw_its->devid_bits > devid_bits )
+                devid_bits = hw_its->devid_bits;
+            if ( hw_its->evid_bits > evid_bits )
+                evid_bits = hw_its->evid_bits;
         }
     }
+    else
+    {
+        ret = vgic_v3_its_init_virtual(d, GUEST_GICV3_ITS_BASE,
+                                       devid_bits, evid_bits);
+        if ( ret )
+            return ret;
+        else
+            d->arch.vgic.has_its = true;
+
+        ret = gicv3_its_map_translation_register(d);
+        if ( ret )
+            return ret;
+    }
 
     return 0;
 }
@@ -1558,7 +1653,7 @@ void vgic_v3_its_free_domain(struct domain *d)
         list_del(&pos->vits_list);
         xfree(pos);
     }
-
+    gicv3_its_unmap_all_guest_device(d);
     ASSERT(RB_EMPTY_ROOT(&d->arch.vgic.its_devices));
 }
 
diff --git a/xen/arch/arm/vgic-v3.c b/xen/arch/arm/vgic-v3.c
index 65bb7991a6..50249b7bb9 100644
--- a/xen/arch/arm/vgic-v3.c
+++ b/xen/arch/arm/vgic-v3.c
@@ -1717,14 +1717,7 @@ static int vgic_v3_domain_init(struct domain *d)
         d->arch.vgic.rdist_regions[0].size = GUEST_GICV3_GICR0_SIZE;
         d->arch.vgic.rdist_regions[0].first_cpu = 0;
 
-        /*
-         * TODO: only SPIs for now, adjust this when guests need LPIs.
-         * Please note that this value just describes the bits required
-         * in the stream interface, which is of no real concern for our
-         * emulation. So we just go with "10" here to cover all eventual
-         * SPIs (even if the guest implements less).
-         */
-        d->arch.vgic.intid_bits = 10;
+        d->arch.vgic.intid_bits = vgic_v3_hw.intid_bits;
     }
 
     ret = vgic_v3_its_init_domain(d);
diff --git a/xen/include/asm-arm/gic_v3_its.h b/xen/include/asm-arm/gic_v3_its.h
index b8bd910020..bc793a3a5c 100644
--- a/xen/include/asm-arm/gic_v3_its.h
+++ b/xen/include/asm-arm/gic_v3_its.h
@@ -181,6 +181,8 @@ int gicv3_its_map_guest_device(struct domain *d,
                                paddr_t guest_doorbell, uint32_t guest_devid,
                                uint64_t nr_events, bool valid);
 
+int gicv3_its_unmap_all_guest_device(struct domain *d);
+
 int gicv3_allocate_host_lpi_block(struct domain *d, uint32_t *first_lpi);
 void gicv3_free_host_lpi_block(uint32_t first_lpi);
 
diff --git a/xen/include/asm-arm/pci.h b/xen/include/asm-arm/pci.h
index 7c7449d64f..34c99cbcaf 100644
--- a/xen/include/asm-arm/pci.h
+++ b/xen/include/asm-arm/pci.h
@@ -66,6 +66,7 @@ struct pci_host_bridge {
     uint16_t segment;                /* Segment number */
     struct pci_config_window* cfg;   /* Pointer to the bridge config window */
     const struct pci_ops *ops;
+    u64 its_msi_base;
 };
 
 struct pci_ops {
-- 
2.25.1

